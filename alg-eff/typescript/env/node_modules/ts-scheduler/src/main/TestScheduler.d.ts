import { ICancellable } from '../cancellables/ICancellable';
import { IScheduler } from './IScheduler';
import { ITestSchedulerOptions } from './ITestSchedulerOptions';
/**
 * Thrown when run() is called twice during the same loop.
 * @ignore
 */
export declare const ForbiddenNestedRun: import("checked-exceptions/src/internals/checkedExceptionClass").CheckedExceptionClass<"ForbiddenNestedRun", void>;
/**
 * TestScheduler tries to mimic the javascript event loop and provides a low level API
 * to manage the queue. You add add/remove new callbacks also run and then pause
 * the execution for sometime.
 */
export declare class TestScheduler implements IScheduler {
    nextTick: number;
    private time;
    private Q;
    private isRunning;
    private options;
    constructor(options: Partial<ITestSchedulerOptions>);
    asap<T extends unknown[]>(fn: (...t: T) => unknown, ...args: T): ICancellable;
    delay<T extends unknown[]>(fn: (...t: T) => unknown, duration: number, ...args: T): ICancellable;
    now(): number;
    run(): void;
    runTo(n: number): void;
    runBy(n: number): void;
    private hasJob;
    private tick;
    private getList;
    private insert;
    private flush;
}
