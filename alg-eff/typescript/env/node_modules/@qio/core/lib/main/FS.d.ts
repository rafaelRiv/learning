/// <reference types="node" />
import { promises } from 'fs';
import { QIO } from './QIO';
export declare const read: <TBuffer extends Uint8Array>(handle: promises.FileHandle, buffer: TBuffer, offset?: number | null | undefined, length?: number | null | undefined, position?: number | null | undefined) => QIO<{
    bytesRead: number;
    buffer: TBuffer;
}, Error, unknown>;
export declare const readFile: (path: string | Buffer | import("url").URL | promises.FileHandle, options?: "ascii" | "utf8" | "utf-8" | "utf16le" | "ucs2" | "ucs-2" | "base64" | "latin1" | "binary" | "hex" | (import("fs").BaseEncodingOptions & {
    flag?: string | number | undefined;
}) | null | undefined) => QIO<string | Buffer, Error, unknown>;
export declare const write: (handle: promises.FileHandle, string: string, position?: number | null | undefined, encoding?: "ascii" | "utf8" | "utf-8" | "utf16le" | "ucs2" | "ucs-2" | "base64" | "latin1" | "binary" | "hex" | null | undefined) => QIO<{
    bytesWritten: number;
    buffer: string;
}, Error, unknown>;
export declare const writeFile: (path: string | Buffer | import("url").URL | promises.FileHandle, data: string | Uint8Array, options?: "ascii" | "utf8" | "utf-8" | "utf16le" | "ucs2" | "ucs-2" | "base64" | "latin1" | "binary" | "hex" | (import("fs").BaseEncodingOptions & {
    mode?: string | number | undefined;
    flag?: string | number | undefined;
}) | null | undefined) => QIO<void, Error, unknown>;
