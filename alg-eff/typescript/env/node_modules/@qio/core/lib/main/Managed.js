"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Managed = void 0;
const standard_data_structures_1 = require("standard-data-structures");
const QIO_1 = require("./QIO");
const Reservation_1 = require("./Reservation");
class Managed {
    constructor(reservation) {
        this.reservation = reservation;
    }
    static make(acquire, release) {
        return Managed.of(acquire
            .map((a1) => Reservation_1.Reservation.of(QIO_1.QIO.resolve(a1).addEnv(), release(a1)))
            .addEnv());
    }
    static of(reservation) {
        return new Managed(reservation);
    }
    static zip(managed) {
        return managed
            .reduce((a, b) => a.zipWith(b, (x, y) => x.prepend(y)), Managed.make(QIO_1.QIO.resolve(standard_data_structures_1.List.empty()).addEnv(), QIO_1.QIO.void))
            .map((_) => _.asArray.reverse());
    }
    chain(fn) {
        return Managed.of(this.reservation.chain((r1) => r1.acquire.chain((a1) => fn(a1).reservation.map((r2) => {
            const acquire = r2.acquire;
            const release = r2.release.and(r1.release);
            return Reservation_1.Reservation.of(acquire, release);
        }))));
    }
    map(fn) {
        return Managed.of(this.reservation.map((r1) => Reservation_1.Reservation.of(r1.acquire.map(fn), r1.release)));
    }
    use(fn) {
        return this.reservation.chain((R) => R.acquire.bracket_(R.release)(fn));
    }
    use_(io) {
        return this.use(() => io);
    }
    zipWith(that, fn) {
        return this.chain((a1) => that.map((a2) => fn(a1, a2)));
    }
}
exports.Managed = Managed;
