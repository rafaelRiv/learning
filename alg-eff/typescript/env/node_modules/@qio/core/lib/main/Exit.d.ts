export declare enum FiberExitTag {
    SUCCESS = 0,
    FAILURE = 1,
    CANCELLED = 2
}
declare class FiberCancelled {
    readonly tag = FiberExitTag.CANCELLED;
}
declare class FiberFailure<E> {
    readonly cause: E;
    readonly tag = FiberExitTag.FAILURE;
    constructor(cause: E);
}
declare class FiberSuccess<A> {
    readonly value: A;
    readonly tag = FiberExitTag.SUCCESS;
    constructor(value: A);
}
export declare type Exit<A, E> = FiberCancelled | FiberFailure<E> | FiberSuccess<A>;
export declare const Exit: {
    cancel: () => FiberCancelled;
    fail: <E>(cause: E) => FiberFailure<E>;
    fold: <A, E_1>(exit: Exit<A, E_1>) => <S>(S: S, AA: (A: A) => S, EE: (E: E_1) => S) => S;
    succeed: <A_1>(value: A_1) => FiberSuccess<A_1>;
    SUCCESS: FiberExitTag.SUCCESS;
    FAILURE: FiberExitTag.FAILURE;
    CANCELLED: FiberExitTag.CANCELLED;
};
export {};
