import { QIO } from './QIO';
import { Reservation } from './Reservation';
export declare class Managed<A1 = unknown, E1 = never, R1 = unknown> {
    private readonly reservation;
    static make<A1, E1, R1, E2, R2>(acquire: QIO<A1, E1, R1>, release: (a: A1) => QIO<unknown, E2, R2>): Managed<A1, E1 | E2, R1 & R2>;
    static of<A1, E1, R1>(reservation: QIO<Reservation<A1, E1, R1>, E1, R1>): Managed<A1, E1, R1>;
    static zip<A1, E1, R1>(managed: Array<Managed<A1, E1, R1>>): Managed<A1[], E1, R1>;
    private constructor();
    chain<A2, E2, R2>(fn: (a: A1) => Managed<A2, E2, R2>): Managed<A2, E1 | E2, R1 & R2>;
    map<A2>(fn: (a: A1) => A2): Managed<A2, E1, R1>;
    use<A2, E2, R2>(fn: (a: A1) => QIO<A2, E2, R2>): QIO<A2, E1 | E2, R1 & R2>;
    use_<A2, E2, R2>(io: QIO<A2, E2, R2>): QIO<A2, E1 | E2, R1 & R2>;
    zipWith<A2, E2, R2, X>(that: Managed<A2, E2, R2>, fn: (a1: A1, a2: A2) => X): Managed<X, E1 | E2, R1 & R2>;
}
