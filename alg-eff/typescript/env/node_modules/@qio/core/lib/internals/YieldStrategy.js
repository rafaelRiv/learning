"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.YieldDuration = exports.YieldCount = exports.YieldStrategy = void 0;
const FiberConfig_1 = require("./FiberConfig");
class YieldStrategy {
    static create(scheduler, config) {
        switch (config.tag) {
            case FiberConfig_1.YieldStrategyTag.INS_COUNT:
                return new YieldCount(scheduler, config.maxInstructionCount);
            case FiberConfig_1.YieldStrategyTag.DURATION:
                return new YieldDuration(scheduler, config.maxDuration);
            default:
                return new YieldCount(scheduler);
        }
    }
    insert(cb, ...T) {
        this.init();
        return this.defer(cb, ...T);
    }
}
exports.YieldStrategy = YieldStrategy;
class YieldCount extends YieldStrategy {
    constructor(scheduler, maxCount = Number.MAX_SAFE_INTEGER) {
        super();
        this.scheduler = scheduler;
        this.count = 0;
        this.maxCount = Math.min(Math.max(1, maxCount), Number.MAX_SAFE_INTEGER);
    }
    canYield() {
        const R = this.count > this.maxCount;
        this.count++;
        return R;
    }
    defer(cb, ...T) {
        return this.scheduler.asap(cb, ...T);
    }
    init() {
        this.count = 0;
    }
}
exports.YieldCount = YieldCount;
class YieldDuration extends YieldStrategy {
    constructor(scheduler, maxDuration) {
        super();
        this.scheduler = scheduler;
        this.maxDuration = maxDuration;
        this.start = this.scheduler.now();
    }
    canYield() {
        return this.scheduler.now() - this.start >= this.maxDuration;
    }
    defer(cb, ...T) {
        return this.scheduler.asap(cb, ...T);
    }
    init() {
        this.start = this.scheduler.now();
    }
}
exports.YieldDuration = YieldDuration;
