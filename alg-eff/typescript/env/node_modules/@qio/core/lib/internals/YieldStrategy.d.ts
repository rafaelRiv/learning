import { ICancellable, IScheduler } from 'ts-scheduler';
import { FiberConfig } from './FiberConfig';
export declare abstract class YieldStrategy {
    static create(scheduler: IScheduler, config: FiberConfig): YieldStrategy;
    abstract canYield(): boolean;
    abstract init(): void;
    insert<T extends unknown[]>(cb: (...T: T) => unknown, ...T: T): ICancellable;
    protected abstract defer<T extends unknown[]>(cb: (...t: T) => unknown, ...t: T): ICancellable;
}
export declare class YieldCount extends YieldStrategy {
    private readonly scheduler;
    readonly maxCount: number;
    private count;
    constructor(scheduler: IScheduler, maxCount?: number);
    canYield(): boolean;
    defer<T extends unknown[]>(cb: (...T: T) => unknown, ...T: T): ICancellable;
    init(): void;
}
export declare class YieldDuration extends YieldStrategy {
    private readonly scheduler;
    readonly maxDuration: number;
    private start;
    constructor(scheduler: IScheduler, maxDuration: number);
    canYield(): boolean;
    defer<T extends unknown[]>(cb: (...T: T) => unknown, ...T: T): ICancellable;
    init(): void;
}
