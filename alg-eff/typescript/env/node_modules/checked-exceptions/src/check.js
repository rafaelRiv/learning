"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const empty_1 = require("./internals/empty");
/**
 * Creates a new class of type [[CheckedExceptionClass]].
 * @param type Type of the exception
 * @param toString Takes in a set of data params and converts it to error string
 */
exports.check = (type, toString = empty_1.empty) => class CheckedException extends Error {
    constructor(data) {
        super();
        this.data = data;
        /**
         * Name of the error
         */
        this.name = type;
        /**
         * Returns the type of the exception
         */
        this.type = type;
        /**
         * Reference to the passed on [[toString]].
         * This is done for perf optimization.
         */
        this.dataToString = toString;
    }
    /**
     * Returns the error message
     */
    get message() {
        return this.dataToString(this.data);
    }
    /**
     * Checks if the object is an instance of the given error type
     * @param obj Any object
     */
    static is(obj) {
        return obj instanceof CheckedException;
    }
    /**
     * Creates a new instance of the exception
     * @param message Error Message
     */
    static of(data) {
        return new CheckedException(data);
    }
    /**
     * Returns a printable error message
     */
    toString() {
        const str = this.dataToString(this.data);
        const nStr = str.length > 0 ? `: ${str}` : str;
        return `${this.name}${nStr}`;
    }
    /**
     * Use `info` to access the type information.
     *
     * ```ts
     * const NoSuchElement = check('NoSuchElement')
     *
     * type NoSuchElementException = typeof NoSuchElement.info
     * ```
     */
    static get info() {
        throw new Error('`info` should only be accessed to infer the type of the exception.');
    }
};
